version: '3.8'

volumes:
  prometheus-data:
    driver: local

services:

  go2rtc:
    image: alexxit/go2rtc
    container_name: go2rtc
    # network_mode: host       # important for WebRTC, HomeKit, UDP cameras
    network_mode: bridge
    privileged: true         # only for FFmpeg hardware transcoding
    restart: unless-stopped  # autorestart on fail or config change from WebUI
    environment:
      - TZ=Europe/Rome  # timezone in logs
    volumes:
      - ./go2rtc-config:/config   # folder for go2rtc.yaml file (edit from WebUI)
    ports:
      - "1984:1984"
      - "1935:1935"

  grafana:
    build: './grafana'
    container_name: grafana
    volumes:
      - ./grafana/grafana_volume:/var/lib/grafana
      - "./grafana/grafana.ini:/etc/grafana/grafana.ini"
      - "./grafana/assets:/usr/share/grafana/public/custom_assets"
    ports:
      - "${GRAFANA_PORT}:3000" 

  prometheus:
    image: docker.io/prom/prometheus:v2.52.0
    container_name: prometheus
    ports:
      - 9090:9090
    command: "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - ./prometheus-config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped

  influxdb:
    image: influxdb:2.1.1
    volumes:
      - ./influxdb-config/influx_volume:/var/lib/influxdb2:rw
      # - ./influxdb-config/entrypoint.sh:/entrypoint.sh
    env_file:
      - .env
    # entrypoint: ["chmod +x", "/entrypoint.sh"]
    restart: on-failure:10
    ports:
      - ${DOCKER_INFLUXDB_INIT_PORT}:8086
  
  mosquitto:
      image: eclipse-mosquitto
      hostname: mosquitto
      container_name: mosquitto
      restart: unless-stopped
      ports:
        - "1883:1883"
        - "9001:9001"
      volumes:
        - ./mosquitto/mosquitto_volume:/etc/mosquitto
        - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf

  grafana_upload_middleware:
    build:
      context: ./grafana_upload_middleware
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DEBUG=1

  node_control:
    build:
      context: ./node_control
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DEBUG=1
      - GROUND_STATION_HOST_IP=${GROUND_STATION_HOST_IP}
      - FUELLING_STATION_PI_IP=${FUELLING_STATION_PI_IP}
      - HEARTBEAT_INTERVAL=${HEARTBEAT_INTERVAL}

  # read_lora:
  #   build:
  #     context: ./read_lora
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8090:8090"
  #   environment:
  #     - DEBUG=1

# # For Mac
  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:v0.49.1
  #   container_name: cadvisor
  #   ports:
  #     - 8080:8080
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:ro
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /dev/disk/:/dev/disk:ro
  #   devices:
  #     - /dev/kmsg
  #   privileged: true
  #   restart: unless-stopped


  # node_exporter:
  #   image: quay.io/prometheus/node-exporter:v1.8.1
  #   container_name: node_exporter
  #   command: "--path.rootfs=/host"
  #   pid: host
  #   restart: unless-stopped
  #   volumes:
  #     - /:/host:ro,rslave

# For Windows
  # cadvisor:
  #   image: gcr.io/cadvisor/cadvisor:v0.49.1
  #   container_name: cadvisor
  #   ports:
  #     - 8080:8080
  #   volumes:
  #     - C:\:/rootfs:ro
  #     - C:\var/run:/var/run:ro
  #     - C:\sys:/sys:ro
  #     - C:\var/lib/docker/:/var/lib/docker:ro
  #     - C:\dev/disk/:/dev/disk:ro
  #   devices:
  #     - /dev/kmsg
  #   privileged: true
  #   restart: unless-stopped


  # node_exporter:
  #   image: quay.io/prometheus/node-exporter:v1.8.1
  #   container_name: node_exporter
  #   command: "--path.rootfs=/host"
  #   pid: host
  #   restart: unless-stopped
  #   volumes:
  #     - C:\:/host:ro,rslave
  